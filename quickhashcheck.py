#!/usr/bin/env python

## Quick check that all files hashed by hashdeep are present.
## Optionally, randomly check a random percentage of the md5 hashes.
##
version = "160303"
author = "Christopher Lausted"


## Import libraries
import csv, sys, time, getopt, hashlib, os.path
from random import random

## Print help for the user. 
def help():
    print
    print "Quick Hash Check version", version, "by", author
    print "For use with hashfiles generated by hashdeep."
    print "Example:"
    print "$ hashdeep ./folder > hash.txt"
    print "$ quickhashcheck [OPTIONS] hash.txt"
    print "  -h     Help & information"
    print "  -p     Percent of files to check MD5 hashes (default 0)"
    print "  -a     Algorithm 'md5' (default) or 'sha256'"
    print
    sys.exit(2)
    ## End of help()

## Get options and filename.
try:
	opts, args = getopt.getopt(sys.argv[1:], "hp:a:")
except getopt.GetoptError:
    help()
if (len(args) != 1):
    help()
hashfile = args[0]

## Interpret options.
perc = 0.0
alg = "md5"
for opt, arg in opts:
    if (opt == "-p"):
        ## Percentage of files to check hashes.
        perc = float(arg)
    elif (opt == "-a"):
        ## Algorithm if not md5. 
        alg = arg
    else:
        ## Show help and quit.
        help()

## Define the hash algorithm to use.
def hexdigest(fname):
    if (alg=="md5"):
        return hashlib.md5(open(fname,'rb').read()).hexdigest()
    else:
        return hashlib.sha256(open(fname,'rb').read()).hexdigest()
    ## End of hexdigest() 

## Open the file and put the columns into lists.
## Skip header lines that start with % or #. 
data = csv.reader(open(hashfile, 'rb'), delimiter=",", quotechar='|')
fsize, md5, sha256, fname = [], [], [], []
for row in data:
    firstchar = row[0][0]
    if (firstchar!="%" and firstchar!="#"):
        fsize.append(row[0])
        md5.append(row[1])
        sha256.append(row[2])
        fname.append(row[3])

## Check each file in fname array.  
## Display 0 for missing, 1 for found, 2 for verified hash. 
found, bad, miss = 0, 0, 0
badlist, misslist = [], []

for i in range(len(fname)):
    if (os.path.isfile(fname[i])==False):
        ## File does not exist. 
        miss += 1
        misslist.append(fname[i])
        sys.stdout.write("0")
    elif (random()*100 > perc):
        ## File does exist. 
        found += 1
        sys.stdout.write("1")
    else:
        ## Check hash.
        h = hexdigest(fname[i])
        if (h==md5[i] or h==sha256[i]):
            found += 1
            sys.stdout.write("2")
        else:  
            bad += 1
            badlist.append(fname[i])
            sys.stdout.write("0")
    sys.stdout.flush()
    #time.sleep(1)
    
## Report.
print
if (miss>0): 
    print
    print "Missing:"
    for filename in misslist: 
        print filename
if (bad>0): 
    print
    print "Failed hash verification:"
    for filename in badlist: 
        print filename
print
print "Files missing:", miss
print "Files failing verification:", bad
print "Files found:", found


'''
Copyright 2016 Christopher Lausted

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''